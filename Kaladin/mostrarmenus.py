#Tomas Farias
#Modulo para los print de los menus. Mucho, mucho texto.


##Aca va el menu principal
def mostrar_menu():
    print("Menu principal")
    print("1. Machine learning")
    print("2. Power BI")
    print("3. Hacking")
    print("4. Ayuda")
    print("5. Creditos")
## Los menus de machine learning    
def mostrar_menu_machinelearning():
    print("Menu Machine learning")
    print("0. Preprocesar datos")
    print("1. Aprendizaje supervisado")
    print("2. Aprendizaje no supervisado")
    print("3. Ayuda")
    print("4. Volver al menu principal")
    print("5. Salir")

def mostrar_menu_aprendizaje_supervisado():
    print("Menu Aprendizaje Supervisado")
    print("1. Linear Models")
    print("2. Linear and Quadratic Discriminant Analysis")
    print("3. Kernel Ridge Regression")
    print("4. Support Vector Machines")
    print("5. Stochastic Gradient Descent")
    print("6. Nearest Neighbors")
    print("7. Gaussian Processes")
    print("8. Cross Decomposition")
    print("9. Naive Bayes")
    print("10. Decision Trees")
    print("11. Ensembles")
    print("12. Multiclass and multioutput algorithms")
    print("13. Feature selection")
    print("14. Semi-supervised learning")
    print("15. Isotonic regression")
    print("16. Proability calibration")
    print("17. Neural network models")
    print("18. Volver al menu principal")
    print("19. Salir")
    
def mostrar_menu_aprendizaje_nosupervisado():
    print("Menu Aprendizaje No Supervisado")
    print("1. Gaussian Mixture Models")
    print("2. Manifold learning")
    print("3. Clustering")
    print("4. Biclustering")
    print("5. Decomposing signals in components")
    print("6. Covaraince estimation")
    print("7. Novelty and Outlier Detection")
    print("8. Density Estimation")
    print("9. Neural Network Models")
    print("10. Volver al menu principal")
    print("11. Salir")
    
## Los menus de Power BI    
def mostrar_menu_powerbi():
    print("Menu Power BI")
    print("1. Guia de funciones")
    
def mostrar_menu_guiadefuncionespowerbi():
    print("Menu Guia de Funciones Power BI")
    print("1. Aggregation functions")
    print("3. Filter functions")
    print("12. Table manipulation functions")
    print("h. Ayuda")
    print("15. Salir")

def mostrar_menu_aggregation_functions():
    print("Submenú para Aggregation functions")
    print("1. APPROXIMATEDISTINCTCOUNT: Devuelve un recuento estimado de valores únicos en una columna.")
    print("2. AVERAGE: Devuelve el promedio (media aritmética) de todos los números de una columna.")
    print("3. AVERAGEA: Devuelve el promedio (media aritmética) de los valores de una columna.")
    print("4. AVERAGEX: Calcula el promedio (media aritmética) de un conjunto de expresiones evaluadas sobre una tabla.")
    print("5. COUNT: Cuenta el número de filas de la columna especificada que contienen valores que no están en blanco.")
    print("6. COUNTA: Cuenta el número de filas de la columna especificada que contienen valores que no están en blanco.. ")
    print("7. COUNTAX: Cuenta los resultados que no están en blanco al evaluar el resultado de una expresión en una tabla. ")
    print("8. COUNTBLANK: Cuenta el número de celdas en blanco en una columna. ")
    print("9. COUNTROWS: Cuenta el número de filas en la tabla especificada o en una tabla definida por una expresión. ")
    print("10. COUNTX: Cuenta el número de filas que contienen un número o una expresión que se evalúa como un número, al evaluar una expresión en una tabla. ")
    print("11. DISTINCTCOUNT: Cuenta el número de valores distintos en una columna. ")
    print("12. DISTINCTCOUNTNOBLANK: Cuenta el número de valores distintos en una columna. ")
    print("13. MAX: Devuelve el valor numérico más grande de una columna o entre dos expresiones escalares. ")
    print("14. MAXA: Devuelve el valor más grande de una columna. ")
    print("15. MAXX: Evalúa una expresión para cada fila de una tabla y devuelve el valor numérico más grande. ")
    print("16. MIN: Devuelve el valor numérico más pequeño de una columna o entre dos expresiones escalares. ")
    print("17. MINA: Devuelve el valor más pequeño de una columna, incluidos los valores lógicos y los números representados como texto.")
    print("18. MINX: Devuelve el valor numérico más pequeño que resulta de evaluar una expresión para cada fila de una tabla. ")
    print("19. PRODUCT: Devuelve el producto de los números de una columna.")
    print("20. PRODUCTX: Devuelve el producto de una expresión evaluada para cada fila de una tabla.")
    print("21. SUM: Suma todos los números de una columna.")
    print("22. SUMX: Devuelve la suma de una expresión evaluada para cada fila de una tabla.")
    print("23. Volver al menu principal")
    print("24. Salir")

def mostrar_filter_functions_submenu():
    print("Submenu para filter functions")
    print("1. ALL: Devuelve todas las filas de una tabla o todos los valores de una columna, ignorando los filtros que puedan haberse aplicado.")
    print("2. ALLCROSSFILTERED: Borre todos los filtros que se aplican a una tabla.")
    print("3. ALLEXCEPT: Elimina todos los filtros de contexto de la tabla, excepto los filtros que se han aplicado a las columnas especificadas. ")
    print("4. ALLNOBLANKKROW: Desde la tabla principal de una relación, devuelve todas las filas excepto la fila en blanco, o todos los valores distintos de una columna excepto la fila en blanco, e ignora los filtros de contexto que puedan existir.")
    print("5. ALLSELECTED: Elimina los filtros de contexto de las columnas y filas de la consulta actual, al tiempo que conserva todos los demás filtros de contexto o filtros explícitos. ")
    print("6. CALCULATE: Evalúa una expresión en un contexto de filtro modificado.")
    print("7. CALCULATETABLE: Evalúa una expresión de tabla en un contexto de filtro modificado.")
    print("8. EARLIER: Devuelve el valor actual de la columna especificada en una pasada de evaluación externa de la columna mencionada.")
    print("9. EARLIST: Devuelve el valor actual de la columna especificada en una pasada de evaluación externa de la columna especificada.")
    print("10. FILTER: Devuelve una tabla que representa un subconjunto de otra tabla o expresión.")
    print("11. INDEX: Devuelve una fila en una posición absoluta, especificada por el parámetro de posición, dentro de la partición especificada, ordenada por el orden especificado o en el eje especificado.")
    print("12. KEEPFILTERS: Modifica cómo se aplican los filtros al evaluar una función CALCULATE o CALCULATETABLE.")
    print("13. LOOKUPVALUE: Devuelve el valor de la fila que cumple todos los criterios especificados por las condiciones de búsqueda. La función puede aplicar una o más condiciones de búsqueda.")
    print("14. MATCHBY: En funciones de ventana, define las columnas que se utilizan para determinar cómo hacer coincidir los datos e identificar la fila actual .")
    print("15. OFFSET: Devuelve una única fila que se coloca antes o después de la fila actual dentro de la misma tabla, según un desplazamiento determinado.")
    print("16. ORDERBY: Define las columnas que determinan el orden de clasificación dentro de cada una de las particiones de una función VENTANA.")
    print("17. PARTITIONBY: Define las columnas que se utilizan para particionar el parámetro <relación> de una función VENTANA.")
    print("18. RANK: Devuelve la clasificación de una fila dentro del intervalo dado.")
    print("19. REMOVEFILTERS: Borra los filtros de las tablas o columnas especificadas.")
    print("20. ROWNUMBER: Devuelve la clasificación única de una fila dentro del intervalo dado.")
    print("21. SELECTEDVALUE: Devuelve el valor cuando el contexto de columnName se ha filtrado a un solo valor distinto. De lo contrario, devuelve un resultado alternativo.")
    print("22. WINDOW: Devuelve varias filas ubicadas dentro del intervalo dado.")
    print("23. Volver al menu principal")
    print("24. Salir")

def mostrar_table_manipulation_functions():
    print("Submenu para table manipulation functions")
    print("1. ADDCOLUMNS: ")
    print("2. ADDMISSINGITEMS: ")
    print("3. CROSSJOIN: ")
    print("4. CURRENTGROUP: ")
    print("5. DATATABLE: ")
    print("6. DETAILROWS: ")
    print("7. DISTINCT column: ")
    print("8. DISTINCT table: ")
    print("9. EXCEPT: ")
    print("10. FILTERS: ")
    print("11. GENERATE: ")
    print("12. GENERATEALL: ")
    print("13. GENERATESERIES: ")
    print("14. GROUPBY: ")
    print("15. IGNORE: ")
    print("16. INTERSECT: ")
    print("17. NATURALINNERJOIN: ")
    print("18. NATURALLEFTOUTERJOIN: ")
    print("19. ROLLUP: ")
    print("20. ROLLUPADDISSUBTOTAL: ")
    print("21. ROLLUPISSUBTOTAL: ")
    print("22. ROLLUPGROUP: ")
    print("23. ROW: ")
    print("24. SELECTCOLUMNS: ")
    print("25. SUBSTITUTEWITHINDEX: ")
    print("26. SUMMARIZE: ")
    print("27. SUMMARIZECOLUMNS: ")
    print("28. Table Constructor: ")
    print("29. TOPN: ")
    print("30. TREATAS:	")
    print("31. UNION: ")
    print("32. VALUES: ")
    print("33. Volver al menu principal")
    print("34. Salir")    

def mostrar_menu_linear_models():
    print("Menu Linear Regression")
    print("1. Linear Regression")
    print("2. Ridge")
    print("3. Ridge Classifier")
    print("4. Lasso")
    print("5. Lasso CV")
    print("6. MultitaskLasso")
    print("7. ElasticNet")
    print("8. MultitaskElasticNet")
    print("9. LassoLars")
    print("10. BayesianRidge")
    print("11. ARDRegression")
    print("12. LogisticRegression")
    print("13. TweedieRegressor")
    print("14. Perceptron")
    print("15. PassiveAggressiveClassifier")
    print("16. PassiveAggressiveRegressor")
    print("17. Volver al menu principal")
    print("18. Salir")
    
def mostrar_menu_lineal_and_quadratic_discriminant_analysis():
    print("Menu Linear and Quadratic Discriminant Analysis")
    print("1. Linear Discriminant Analysis")
    print("2. Quadratic Discriminant Analysis")
    print("3. Volver al menu principal")
    print("4. Salir")
    
def mostrar_menu_support_vector_machines():
    print("Menu Support Vector Machines")
    print("1. LinearSVC")
    print("2. NuSVC")
    print("3. SVC")
    print("4. Volver al menu principal")
    print("5. Salir")
    
def mostrar_menu_stochastic_gradient_descent():
    print("Menu Stochastic Gradient Descent")
    print("1. SGDClassifier")
    print("2. SGDRegressor")
    print("3. SGDOneClassSVM")
    print("4. StandardScaler")
    print("5. Volver al menu principal")
    print("6. Salir")
    
def mostrar_menu_stochastic_gradient_descent():
    print("Menu Stochastic Gradient Descent")
    print("1. SGDClassifier")
    print("2. SGDRegressor")
    print("3. SGDOneClassSVM")
    print("4. StandardScaler")
    print("5. Volver al menu principal")
    print("6. Salir")
    
def mostrar_menu_nearest_neighbors():
    print("Menu Nearest Neighbors")
    print("1. KNeighborsClassifier")
    print("2. KNeighborsRegressor")
    print("3. KDTree")
    print("4. RadiusNeighborsClassifier")
    print("5. RadiusNeighborsRegressor")
    print("6. Volver al menu principal")
    print("7. Salir")
    
def mostrar_menu_gaussian_processes():
    print("Menu Gaussian Processes")
    print("1. GaussianProcessClassifier")
    print("2. GaussianProcessRegressor")
    print("3. Volver al menu principal")
    print("4. Salir")
    
def mostrar_menu_cross_decomposition():
    print("Menu Cross Decomposition")
    print("1. PLSCanonical")
    print("2. PLSSVD")
    print("3. PLSRegression")
    print("4. Volver al menu principal")
    print("5. Salir")
    
def mostrar_menu_gaussian_naive_bayes():
    print("Menu Gaussian Naive Bayes")
    print("1. BernoulliNB")
    print("2. MultinomialNB")
    print("3. ComplementNB")
    print("4. BernoulliNB")
    print("5. CategoricalNB")    
    print("6. Volver al menu principal")
    print("7. Salir")
    
def mostrar_menu_decision_trees():
    print("Menu Decision Trees")
    print("1. DecisionTreeClassifier")
    print("2. DecisionTreeRegressor")
    print("3. Volver al menu principal")
    print("4. Salir")
    
def mostrar_menu_ensembles():
    print("Menu Ensembles")
    print("1. GradientBoostingClassifier")
    print("2. GradientBoostingRegressor")
    print("3. HistGradientBoostingClassifier")
    print("4. HistGradientBoostingRegressor")
    print("5. RandomForestClassifier")
    print("6. RandomForestRegressor")
    print("7. ExtraTreesClassifier")
    print("8. ExtraTreesRegressor")
    print("9. VortingClassifier")
    print("10. Volver al menu principal")
    print("11. Salir")
    
def mostrar_menu_multiclass():
    print("Menu Multiclass")
    print("1. OneVsRestClassifier")
    print("2. OneVsOneClassifier")
    print("3. OutputCodeClassifier")
    print("4. MultioutputClassifier")
    print("5. RegressorChain")
    print("6. Volver al menu principal")
    print("7. Salir")
    
def mostrar_menu_semisupervised_learning():
    print("Menu Semi-supervised learning")
    print("1. SelfTrainingClassifier")
    print("2. SelfTrainingRegressor")
    print("3. LabelPropagation")
    print("4. LabelSpreading")
    print("5. Volver al menu principal")
    print("6. Salir")

def mostrar_menu_neural_network_models():
    print("Menu Neural Network Models")
    print("1. MLPClassifier")
    print("2. MLPRegressor")
    print("3. Volver al menu principal")
    print("4. Salir")